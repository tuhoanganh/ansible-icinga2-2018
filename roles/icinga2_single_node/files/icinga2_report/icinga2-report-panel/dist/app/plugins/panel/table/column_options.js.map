{"version":3,"sources":["../../../../../../../icinga2-report-panel/app/plugins/panel/table/column_options.ts"],"names":["_","kbn","ColumnOptionsCtrl","$scope","editor","activeStyleIndex","panelCtrl","ctrl","panel","unitFormats","getUnitFormats","colorModes","text","value","columnTypes","fontSizes","dateFormats","getColumnNames","table","map","columns","col","onColorChange","bind","render","column","subItem","unit","newStyleRule","type","alias","decimals","colors","colorMode","pattern","dateFormat","thresholds","styles","stylesCount","length","indexToInsert","last","splice","style","without","index","ref","copy","styleIndex","colorIndex","newColor","columnOptionsTab","$q","uiSegmentSrv","restrict","scope","templateUrl","controller"],"mappings":"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","file":"column_options.js","sourcesContent":["///<reference path=\"../../../headers/common.d.ts\" />\n\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport class ColumnOptionsCtrl {\n  panel: any;\n  panelCtrl: any;\n  colorModes: any;\n  columnStyles: any;\n  columnTypes: any;\n  fontSizes: any;\n  dateFormats: any;\n  addColumnSegment: any;\n  unitFormats: any;\n  getColumnNames: any;\n  activeStyleIndex: number;\n\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n\n    this.activeStyleIndex = 0;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = kbn.getUnitFormats();\n    this.colorModes = [\n      { text: 'Disabled', value: null },\n      { text: 'Cell', value: 'cell' },\n      { text: 'Value', value: 'value' },\n      { text: 'Row', value: 'row' },\n    ];\n    this.columnTypes = [\n      { text: 'Number', value: 'number' },\n      { text: 'String', value: 'string' },\n      { text: 'Date', value: 'date' },\n      { text: 'Hidden', value: 'hidden' },\n    ];\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.dateFormats = [\n      { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },\n      { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },\n      { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },\n      { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },\n    ];\n\n    this.getColumnNames = () => {\n      if (!this.panelCtrl.table) {\n        return [];\n      }\n      return _.map(this.panelCtrl.table.columns, function(col: any) {\n        return col.text;\n      });\n    };\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  setUnitFormat(column, subItem) {\n    column.unit = subItem.value;\n    this.panelCtrl.render();\n  }\n\n  addColumnStyle() {\n    var newStyleRule = {\n      unit: 'short',\n      type: 'number',\n      alias: '',\n      decimals: 2,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      colorMode: null,\n      pattern: '',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      thresholds: [],\n    };\n\n    var styles = this.panel.styles;\n    var stylesCount = styles.length;\n    var indexToInsert = stylesCount;\n\n    // check if last is a catch all rule, then add it before that one\n    if (stylesCount > 0) {\n      var last = styles[stylesCount - 1];\n      if (last.pattern === '/.*/') {\n        indexToInsert = stylesCount - 1;\n      }\n    }\n\n    styles.splice(indexToInsert, 0, newStyleRule);\n    this.activeStyleIndex = indexToInsert;\n  }\n\n  removeColumnStyle(style) {\n    this.panel.styles = _.without(this.panel.styles, style);\n  }\n\n  invertColorOrder(index) {\n    var ref = this.panel.styles[index].colors;\n    var copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.panelCtrl.render();\n  }\n\n  onColorChange(styleIndex, colorIndex) {\n    return newColor => {\n      this.panel.styles[styleIndex].colors[colorIndex] = newColor;\n      this.render();\n    };\n  }\n}\n\n/** @ngInject */\nexport function columnOptionsTab($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table/column_options.html',\n    controller: ColumnOptionsCtrl,\n  };\n}\n"]}