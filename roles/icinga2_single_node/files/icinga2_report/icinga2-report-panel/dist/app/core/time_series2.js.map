{"version":3,"sources":["../../../../../icinga2-report-panel/app/core/time_series2.ts"],"names":["kbn","_","matchSeriesOverride","aliasOrRegex","seriesAlias","regex","stringToJsRegex","match","translateFillOption","fill","TimeSeries","opts","datapoints","label","alias","id","aliasEscaped","escape","color","valueFormater","valueFormats","none","stats","legend","unit","hasMsResolution","isMsResolutionNeeded","overrides","lines","dashes","dashLength","points","bars","yaxis","zindex","nullPointMode","stack","i","length","override","show","lineWidth","linewidth","spaceLength","pointradius","radius","steppedLine","steps","fillBelowTo","transform","fillStyle","result","total","max","Number","MAX_VALUE","min","logmin","avg","current","first","delta","diff","range","timeStep","allIsNull","allIsZero","ignoreNulls","nullAsZero","currentTime","currentValue","nonNulls","previousTime","previousValue","previousDeltaUp","undefined","isNumber","push","count","formater","decimals","scaledDecimals","value","isFinite","timestamp","toString","options","hideEmpty","hideZero"],"mappings":"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","file":"time_series2.js","sourcesContent":["import kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\n\nfunction matchSeriesOverride(aliasOrRegex, seriesAlias) {\n  if (!aliasOrRegex) { return false; }\n\n  if (aliasOrRegex[0] === '/') {\n    var regex = kbn.stringToJsRegex(aliasOrRegex);\n    return seriesAlias.match(regex) != null;\n  }\n\n  return aliasOrRegex === seriesAlias;\n}\n\nfunction translateFillOption(fill) {\n  return fill === 0 ? 0.001 : fill/10;\n}\n\nexport default class TimeSeries {\n  datapoints: any;\n  id: string;\n  label: string;\n  alias: string;\n  aliasEscaped: string;\n  color: string;\n  valueFormater: any;\n  stats: any;\n  legend: boolean;\n  allIsNull: boolean;\n  allIsZero: boolean;\n  decimals: number;\n  scaledDecimals: number;\n  hasMsResolution: boolean;\n  isOutsideRange: boolean;\n\n  lines: any;\n  dashes: any;\n  bars: any;\n  points: any;\n  yaxis: any;\n  zindex: any;\n  stack: any;\n  nullPointMode: any;\n  fillBelowTo: any;\n  transform: any;\n  flotpairs: any;\n  unit: any;\n\n  constructor(opts) {\n    this.datapoints = opts.datapoints;\n    this.label = opts.alias;\n    this.id = opts.alias;\n    this.alias = opts.alias;\n    this.aliasEscaped = _.escape(opts.alias);\n    this.color = opts.color;\n    this.valueFormater = kbn.valueFormats.none;\n    this.stats = {};\n    this.legend = true;\n    this.unit = opts.unit;\n    this.hasMsResolution = this.isMsResolutionNeeded();\n  }\n\n  applySeriesOverrides(overrides) {\n    this.lines = {};\n    this.dashes = {\n      dashLength: []\n    };\n    this.points = {};\n    this.bars = {};\n    this.yaxis = 1;\n    this.zindex = 0;\n    this.nullPointMode = null;\n    delete this.stack;\n\n    for (var i = 0; i < overrides.length; i++) {\n      var override = overrides[i];\n      if (!matchSeriesOverride(override.alias, this.alias)) {\n        continue;\n      }\n      if (override.lines !== void 0) { this.lines.show = override.lines; }\n      if (override.dashes !== void 0) {\n         this.dashes.show = override.dashes;\n         this.lines.lineWidth = 0;\n      }\n      if (override.points !== void 0) { this.points.show = override.points; }\n      if (override.bars !== void 0) { this.bars.show = override.bars; }\n      if (override.fill !== void 0) { this.lines.fill = translateFillOption(override.fill); }\n      if (override.stack !== void 0) { this.stack = override.stack; }\n      if (override.linewidth !== void 0) {\n         this.lines.lineWidth = this.dashes.show ? 0: override.linewidth;\n         this.dashes.lineWidth = override.linewidth;\n      }\n      if (override.dashLength !== void 0) { this.dashes.dashLength[0] = override.dashLength; }\n      if (override.spaceLength !== void 0) { this.dashes.dashLength[1] = override.spaceLength; }\n      if (override.nullPointMode !== void 0) { this.nullPointMode = override.nullPointMode; }\n      if (override.pointradius !== void 0) { this.points.radius = override.pointradius; }\n      if (override.steppedLine !== void 0) { this.lines.steps = override.steppedLine; }\n      if (override.zindex !== void 0) { this.zindex = override.zindex; }\n      if (override.fillBelowTo !== void 0) { this.fillBelowTo = override.fillBelowTo; }\n      if (override.color !== void 0) { this.color = override.color; }\n      if (override.transform !== void 0) { this.transform = override.transform; }\n      if (override.legend !== void 0) { this.legend = override.legend; }\n\n      if (override.yaxis !== void 0) {\n        this.yaxis = override.yaxis;\n      }\n    }\n  }\n\n  getFlotPairs(fillStyle) {\n    var result = [];\n\n    this.stats.total = 0;\n    this.stats.max = -Number.MAX_VALUE;\n    this.stats.min = Number.MAX_VALUE;\n    this.stats.logmin = Number.MAX_VALUE;\n    this.stats.avg = null;\n    this.stats.current = null;\n    this.stats.first = null;\n    this.stats.delta = 0;\n    this.stats.diff = null;\n    this.stats.range = null;\n    this.stats.timeStep = Number.MAX_VALUE;\n    this.allIsNull = true;\n    this.allIsZero = true;\n\n    var ignoreNulls = fillStyle === 'connected';\n    var nullAsZero = fillStyle === 'null as zero';\n    var currentTime;\n    var currentValue;\n    var nonNulls = 0;\n    var previousTime;\n    var previousValue = 0;\n    var previousDeltaUp = true;\n\n    for (var i = 0; i < this.datapoints.length; i++) {\n      currentValue = this.datapoints[i][0];\n      currentTime = this.datapoints[i][1];\n\n      // Due to missing values we could have different timeStep all along the series\n      // so we have to find the minimum one (could occur with aggregators such as ZimSum)\n      if (previousTime !== undefined) {\n        let timeStep = currentTime - previousTime;\n        if (timeStep < this.stats.timeStep) {\n          this.stats.timeStep = timeStep;\n        }\n      }\n      previousTime = currentTime;\n\n      if (currentValue === null) {\n        if (ignoreNulls) { continue; }\n        if (nullAsZero) {\n          currentValue = 0;\n        }\n      }\n\n      if (currentValue !== null) {\n        if (_.isNumber(currentValue)) {\n          this.stats.total += currentValue;\n          this.allIsNull = false;\n          nonNulls++;\n        }\n\n        if (currentValue > this.stats.max) {\n          this.stats.max = currentValue;\n        }\n\n        if (currentValue < this.stats.min) {\n          this.stats.min = currentValue;\n        }\n\n        if (this.stats.first === null) {\n          this.stats.first = currentValue;\n        } else {\n          if (previousValue > currentValue) {   // counter reset\n            previousDeltaUp = false;\n            if (i === this.datapoints.length-1) {  // reset on last\n                this.stats.delta += currentValue;\n            }\n          } else {\n            if (previousDeltaUp) {\n              this.stats.delta += currentValue - previousValue;    // normal increment\n            } else {\n              this.stats.delta += currentValue;   // account for counter reset\n            }\n            previousDeltaUp = true;\n          }\n        }\n        previousValue = currentValue;\n\n        if (currentValue < this.stats.logmin && currentValue > 0) {\n          this.stats.logmin = currentValue;\n        }\n\n        if (currentValue !== 0) {\n          this.allIsZero = false;\n        }\n      }\n\n      result.push([currentTime, currentValue]);\n    }\n\n    if (this.stats.max === -Number.MAX_VALUE) { this.stats.max = null; }\n    if (this.stats.min === Number.MAX_VALUE) { this.stats.min = null; }\n\n    if (result.length && !this.allIsNull) {\n      this.stats.avg = (this.stats.total / nonNulls);\n      this.stats.current = result[result.length-1][1];\n      if (this.stats.current === null && result.length > 1) {\n        this.stats.current = result[result.length-2][1];\n      }\n    }\n    if (this.stats.max !== null && this.stats.min !== null) {\n      this.stats.range = this.stats.max - this.stats.min;\n    }\n    if (this.stats.current !== null && this.stats.first !== null) {\n      this.stats.diff = this.stats.current - this.stats.first;\n    }\n\n    this.stats.count = result.length;\n    return result;\n  }\n\n  updateLegendValues(formater, decimals, scaledDecimals) {\n    this.valueFormater = formater;\n    this.decimals = decimals;\n    this.scaledDecimals = scaledDecimals;\n  }\n\n  formatValue(value) {\n    if (!_.isFinite(value)) {\n      value = null; // Prevent NaN formatting\n    }\n    return this.valueFormater(value, this.decimals, this.scaledDecimals);\n  }\n\n  isMsResolutionNeeded() {\n    for (var i = 0; i < this.datapoints.length; i++) {\n      if (this.datapoints[i][1] !== null) {\n        var timestamp = this.datapoints[i][1].toString();\n        if (timestamp.length === 13 && (timestamp % 1000) !== 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  hideFromLegend(options) {\n    if (options.hideEmpty && this.allIsNull) {\n      return true;\n    }\n    // ignore series excluded via override\n    if (!this.legend) {\n      return true;\n    }\n\n    // ignore zero series\n    if (options.hideZero && this.allIsZero) {\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}