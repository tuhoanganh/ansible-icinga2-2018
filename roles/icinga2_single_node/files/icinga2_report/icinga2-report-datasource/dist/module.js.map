{"version":3,"sources":["../../../icinga2-report-datasource/module.js"],"names":["_","BaseDatasource","Datasource","BaseQueryCtrl","QueryCtrl","BaseConfigCtrl","ConfigCtrl","BaseQueryOptionsCtrl","QueryOptionsCtrl","BaseAnnotationsQueryCtrl","AnnotationsQueryCtrl","Icinga2ReportQueryCtrl","$scope","$injector","uiSegmentSrv","segments","map","target","s","newSegment","push","columns","index","datasource","doRequest","url","data","source","method","then","result","values","length","segment","$index","splice","includes","value","getSegments","Promise","resolve","Icinga2ReportDatasource","instanceSettings","$q","backendSrv","templateSrv","options","targets","filter","refId","hide","editor","tasks","t","name","console","log","panel","dashboard","meta","slug","id","timerange","range","raw"],"mappings":"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","file":"module.js","sourcesContent":["import './css/query-editor.css!'\nimport _ from 'lodash'\nimport {\n  Datasource as BaseDatasource,\n  QueryCtrl as BaseQueryCtrl,\n  ConfigCtrl as BaseConfigCtrl,\n  QueryOptionsCtrl as BaseQueryOptionsCtrl,\n  AnnotationsQueryCtrl as BaseAnnotationsQueryCtrl,\n} from './plugins/simple-json-datasource/module'\n\n\nclass Icinga2ReportQueryCtrl extends BaseQueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector)\n    this.uiSegmentSrv = uiSegmentSrv\n    this.segments = _.map(this.target.segments, s => this.uiSegmentSrv.newSegment(s))\n    this.segments.push(this.uiSegmentSrv.newSegment('*'))\n    this.columns = []\n  }\n\n  getSegments(index = 0) {\n    // console.log('get_segments', index)\n\n    return this.datasource.doRequest({\n      url: this.datasource.url + '/segments',\n      data: {\n        source: this.target.target,\n        segments: _.map(this.segments, 'value'),\n        index: index,\n      },\n      method: 'POST'\n    }).then(result => {\n      this.columns[index] = result.data.values\n      if (this.segments.length <= index) {\n        this.segments.push(this.uiSegmentSrv.newSegment(this.columns[index][0]))\n        this.target.segments = _.map(this.segments, 'value')\n        this.segments.push(this.uiSegmentSrv.newSegment('*'))\n        // this.segmentValueChanged(null, index)\n      }\n      return _.map(result.data.values, s => this.uiSegmentSrv.newSegment(s))\n    })\n  }\n\n  segmentValueChanged(segment, $index) {\n    // console.log('segment_value_changed', segment.value, $index)\n\n    this.segments.splice($index + 1)\n    if (_.includes(['=', '!=', '~', '!~'], segment.value)) {\n      this.segments.push(this.uiSegmentSrv.newSegment(' '))\n    } else if (_.includes(['OR'], segment.value)) {\n      this.getSegments($index + 1)\n    } else if (segment.value !== '*') {\n      this.getSegments($index + 1)\n    }\n    this.target.segments = _.map(this.segments, 'value')\n  }\n\n  getAltSegments(index) {\n    if (this.columns[index]) {\n      return Promise.resolve(\n        _.map(this.columns[index], s => this.uiSegmentSrv.newSegment(s))\n      )\n    }\n    return this.getSegments(index)\n  }\n\n  handleSourceChanged() {\n    this.segments.splice(0)\n    this.getSegments()\n  }\n\n  isSpecialSegment(segment) {\n    return segment.value == 'WHERE' || segment.value == 'GROUP BY'\n  }\n}\n\n\nclass Icinga2ReportDatasource extends BaseDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    super(instanceSettings, $q, backendSrv, templateSrv)\n  }\n\n  mapToTextValue(result) {\n    return result.data\n  }\n\n  buildQueryParameters(options) {\n    // console.log(this, options)\n\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric'\n    })\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: target.target,\n        refId: target.refId,\n        hide: target.hide,\n        segments: target.segments\n      }\n    })\n\n    options.targets = targets\n\n    return options\n  }\n\n  getTasks(editor) {\n    return this.doRequest({\n      url: this.url + '/tasks'\n    }).then(result => {\n      return  _.map(result.data.tasks, t => ({'text': t.name, 'value': t.name}))\n    })\n  }\n\n  updateExport(data) {\n    console.log(data)\n\n    return this.doRequest({\n      url: this.url + '/tasks',\n      method: 'POST',\n      data: data\n    })\n  }\n\n  getExportUrl(panel) {\n    this.doRequest({\n      method: 'POST',\n      url: `${this.url}/query`,\n      data: {\n        dashboard: panel.dashboard.meta.slug,\n        panel: panel.panel.id,\n        targets: panel.panel.targets,\n        timerange: panel.range.raw\n      }\n    })\n    return `${this.url}/export?dashboard=${panel.dashboard.meta.slug}&panel=${panel.panel.id}`\n  }\n}\n\nexport {\n  Icinga2ReportDatasource as Datasource,\n  Icinga2ReportQueryCtrl as QueryCtrl,\n  BaseConfigCtrl as ConfigCtrl,\n  BaseQueryOptionsCtrl as QueryOptionsCtrl,\n  BaseAnnotationsQueryCtrl as AnnotationsQueryCtrl\n}\n"]}